package com.example.resources;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DbAdapter implements KlientInterface<Klient> {

	Connection conn;
	private String url = "jdbc:sqlite:Computer.db";

	String createTable = "CREATE TABLE Klient (id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(30), surname varchar(30), adress varchar(30))";

	Statement statement;
	PreparedStatement addKlientStatement;
	PreparedStatement deleteKlientStatement;
	PreparedStatement getAllKlientStatement;
	PreparedStatement getKlientByIdStatement;

	public DbAdapter() {
		try {
			conn = DriverManager.getConnection(url);
			statement = conn.createStatement();

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			boolean tableExists = false;
			while (rs.next()) {
				if ("".equalsIgnoreCase(rs.getString(""))) {
					tableExists = true;
					break;

				}

				if (!tableExists) {
					statement.executeUpdate(createTable);

				}

				addKlientStatement = conn
						.prepareStatement("INSERT INTO Klient (name, surname, adress)"
								+ "VALUES (?, ?, ?)");
				deleteKlientStatement = conn
						.prepareStatement("DELETE From Klient WHERE name=?");
				getAllKlientStatement = conn
						.prepareStatement("SELECT * FROM Klient");
				getKlientByIdStatement = conn
						.prepareStatement("SELECT * FROM Klient WHERE id=?");

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Klient get(int id) {
		try {

			getKlientByIdStatement.setInt(1, id);
			ResultSet rs = getKlientByIdStatement.executeQuery();
			while (rs.next()) {
				return new Klient(rs.getString("name"),
						rs.getString("surname"), rs.getString("adress"));

			}

		} catch (SQLException e) {

			e.printStackTrace();
		}

		return null;

	}

	public List<Klient> getAll() {
		List<Klient> result = new ArrayList<Klient>();

		try {
			ResultSet rs = getAllKlientStatement.executeQuery();
			while (rs.next()) {
				Klient p = new Klient(createTable, createTable, createTable);
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				p.setAdress(rs.getString("adress"));
				result.add(p);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}

		return result;
	}

	public boolean save(Klient obj) {
		try {
			addKlientStatement.setString(1, obj.getName());
			addKlientStatement.setString(2, obj.getSurname());
			return addKlientStatement.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean delete(Klient obj) {
		try {
			deleteKlientStatement.setString(1, obj.getName());
			deleteKlientStatement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return false;
	}

}
